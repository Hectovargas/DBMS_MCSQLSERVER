import React, { useState, useEffect } from 'react';import apiService from '../services/apiService';import type { ConnectionConfig } from '../services/apiService';import './ConnectionForm.css';interface ConnectionFormProps {  onConnectionSuccess: () => void;   isOpen: boolean;   onClose: () => void; }const ConnectionForm: React.FC<ConnectionFormProps> = ({ onConnectionSuccess, isOpen, onClose }) => {  const [formData, setFormData] = useState<ConnectionConfig>({    name: '',     host: '',     database: '',     username: '',     password: '',     port: 3050   });  const [loading, setLoading] = useState(false);  const [error, setError] = useState<string>('');  const [success, setSuccess] = useState<string>('');  const [testMode, setTestMode] = useState(false);  useEffect(() => {    if (isOpen) {      setFormData({        name: '',        host: '',        database: '',        username: '',        password: '',        port: 3050      });      setError('');      setSuccess('');      setLoading(false);      setTestMode(false);    }  }, [isOpen]);  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {    const { name, value } = e.target;     if (error || success) {      setError('');      setSuccess('');    }    setFormData(prev => ({      ...prev,       [name]: name === 'port' ? parseInt(value) || 3050 : value     }));  };  const handleClose = () => {    if (!loading) {      onClose();    }  };  const handleBackdropClick = (e: React.MouseEvent) => {    if (e.target === e.currentTarget && !loading) {      onClose();    }  };  const handleTestConnection = async () => {    if (!formData.host || !formData.database) {      setError('Host y database son campos requeridos para la prueba');      return;    }    setLoading(true);     setError('');     setSuccess('');     setTestMode(true);     try {      console.log('Iniciando prueba de conexión...');      const result = await apiService.testConnection(formData);      console.log('Resultado de la prueba:', result);      if (result.success) {                    setSuccess('Prueba de conexión exitosa');      } else {        setError(result.message || 'Error en la prueba de conexión');      }    } catch (err: any) {      console.error('Error en prueba de conexión:', err);      setError(err.message || 'Error de conexión al servidor. Verifica que el backend esté ejecutándose.');    } finally {      setLoading(false);    }  };  const handleSubmit = async (e: React.FormEvent) => {    e.preventDefault();     if (!formData.name || !formData.host || !formData.database) {      setError('Nombre, host y base de datos son campos requeridos');      return;    }    setLoading(true);     setError('');     setSuccess('');     setTestMode(false);     try {      console.log('Iniciando agregado de conexión...');      const result = await apiService.addConnection(formData);      console.log('Resultado del agregado:', result);      if (result.success) {                    setSuccess('Conexión agregada exitosamente');        onConnectionSuccess();        setTimeout(() => {          onClose();        }, 1500);      } else {        setError(result.message || 'Error al agregar la conexión');      }    } catch (err: any) {      console.error('Error al agregar conexión:', err);      setError(err.message || 'Error de conexión al servidor. Verifica que el backend esté ejecutándose.');    } finally {      setLoading(false);    }  };  if (!isOpen) return null;  return (    <div className="modal-overlay" onClick={handleBackdropClick}>      {}      <div className="modal-container">        {}        <div className="modal-header">          <h2>Nueva Conexión de Base de Datos Firebird</h2>          <button             className="modal-close-btn"             onClick={handleClose}            disabled={loading}            title="Cerrar"          >            ✕          </button>        </div>        {}        {}        {error && (          <div className="error-message">            <strong><span className="error-icon"></span> Error:</strong> {error}          </div>        )}        {}        {success && (          <div className="success-message">            <strong><span className="success-icon"></span> Éxito:</strong> {success}          </div>        )}        {}        <form onSubmit={handleSubmit} className="connection-form">          {}          <div className="form-group">            <label htmlFor="name">Nombre de la Conexión *</label>            <input              type="text"              id="name"              name="name"              value={formData.name}              onChange={handleInputChange}              required              placeholder="Mi Base de Datos Firebird"              disabled={loading}            />          </div>          {}          <div className="form-group">            <label htmlFor="host">Host *</label>            <input              type="text"              id="host"              name="host"              value={formData.host}              onChange={handleInputChange}              required              placeholder="localhost o 192.168.1.100"              disabled={loading}            />          </div>          {}          <div className="form-group">            <label htmlFor="database">Base de Datos *</label>            <input              type="text"              id="database"              name="database"              value={formData.database}              onChange={handleInputChange}              required              placeholder="/path/to/database.fdb"              disabled={loading}            />          </div>          {}          <div className="form-group">            <label htmlFor="username">Usuario</label>            <input              type="text"              id="username"              name="username"              value={formData.username}              onChange={handleInputChange}              placeholder="SYSDBA"              disabled={loading}            />          </div>          {}          <div className="form-group">            <label htmlFor="password">Contraseña</label>            <input              type="password"              id="password"              name="password"              value={formData.password}              onChange={handleInputChange}              placeholder="masterkey"              disabled={loading}            />          </div>          {}          <div className="form-group">            <label htmlFor="port">Puerto</label>            <input              type="number"              id="port"              name="port"              value={formData.port}              onChange={handleInputChange}              min="1"              max="65535"              placeholder="3050"              disabled={loading}            />          </div>          {}          <div className="form-actions">            {}            <button              type="button"              className={`test-btn ${loading && testMode ? 'loading' : ''}`}              onClick={handleTestConnection}              disabled={loading || !formData.host || !formData.database}            >              {loading && testMode ? 'Probando...' : 'Probar Conexión'}            </button>            {}            <button              type="submit"              className={`test-btn ${loading && !testMode ? 'loading' : ''}`}              disabled={loading || !formData.name || !formData.host || !formData.database}            >              {loading && !testMode ? 'Agregando...' : 'Agregar Conexión'}            </button>          </div>        </form>      </div>    </div>  );};export default ConnectionForm;